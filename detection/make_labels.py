import os
import xml.etree.ElementTree as ET

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å XML –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
dataset_path = "detection\dataset\potholes"

# –ö–ª–∞—Å—Å –¥–ª—è YOLO (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–∞—Å—Å "pothole", —Ç–æ 0)
CLASS_ID = 0

# –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
for filename in os.listdir(dataset_path):
    if filename.endswith(".xml"):
        xml_path = os.path.join(dataset_path, filename)
        txt_path = os.path.join(dataset_path, filename.replace(".xml", ".txt"))

        # –†–∞–∑–±–∏—Ä–∞–µ–º XML
        tree = ET.parse(xml_path)
        root = tree.getroot()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        size = root.find("size")
        img_width = int(size.find("width").text)
        img_height = int(size.find("height").text)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º txt-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        with open(txt_path, "w") as txt_file:
            for obj in root.findall("object"):
                bndbox = obj.find("bndbox")
                xmin = int(bndbox.find("xmin").text)
                ymin = int(bndbox.find("ymin").text)
                xmax = int(bndbox.find("xmax").text)
                ymax = int(bndbox.find("ymax").text)

                # YOLO —Ñ–æ—Ä–º–∞—Ç: class x_center y_center width height (–≤—Å–µ –æ—Ç–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                x_center = (xmin + xmax) / (2.0 * img_width)
                y_center = (ymin + ymax) / (2.0 * img_height)
                box_width = (xmax - xmin) / img_width
                box_height = (ymax - ymin) / img_height

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ txt —Ñ–∞–π–ª
                txt_file.write(f"{CLASS_ID} {x_center:.6f} {y_center:.6f} {box_width:.6f} {box_height:.6f}\n")

        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {txt_path}")





import os
import shutil
import random

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
source_dir = "detection/data/potholes"  # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –º–µ—Ç–∫–∞–º–∏
train_img_dir = "detection/data/train/images"
train_lbl_dir = "detection/data/train/labels"
valid_img_dir = "detection/data/valid/images"
valid_lbl_dir = "detection/data/valid/labels"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for path in [train_img_dir, train_lbl_dir, valid_img_dir, valid_lbl_dir]:
    os.makedirs(path, exist_ok=True)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
files = [f for f in os.listdir(source_dir) if f.endswith(".jpg")]
random.shuffle(files)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–±–∏–µ–Ω–∏—è
split_idx = int(len(files) * 0.8)

# –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def copy_files(file_list, dest_img_dir, dest_lbl_dir):
    for file in file_list:
        img_path = os.path.join(source_dir, file)
        txt_path = os.path.join(source_dir, file.replace(".jpg", ".txt"))

        # –ö–æ–ø–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –º–µ—Ç–∫–∏
        if os.path.exists(txt_path):
            shutil.copy(img_path, os.path.join(dest_img_dir, file))
            shutil.copy(txt_path, os.path.join(dest_lbl_dir, file.replace(".jpg", ".txt")))

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ `train`
copy_files(files[:split_idx], train_img_dir, train_lbl_dir)

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ `valid`
copy_files(files[split_idx:], valid_img_dir, valid_lbl_dir)

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(files[:split_idx])} train, {len(files[split_idx:])} valid")




import os

def replace_class_in_labels(label_dir):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º .txt —Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ label_dir –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å 0 –Ω–∞ 1.
    """
    for filename in os.listdir(label_dir):
        if filename.endswith(".txt"):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã
            file_path = os.path.join(label_dir, filename)

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, "r") as f:
                lines = f.readlines()

            # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å 0 –Ω–∞ 1
            updated_lines = []
            for line in lines:
                parts = line.strip().split()
                if parts and parts[0] == "1":  # –ï—Å–ª–∏ –∫–ª–∞—Å—Å 0
                    parts[0] = "0"  # –ú–µ–Ω—è–µ–º –Ω–∞ 1
                updated_lines.append(" ".join(parts))  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(file_path, "w") as f:
                f.write("\n".join(updated_lines))

            print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: {file_path}")

# üìå –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –≤ –ø–∞–ø–∫–∞—Ö train/labels –∏ valid/labels
replace_class_in_labels("detection/data/yolo_format/labels/train")
replace_class_in_labels("detection/data/yolo_format/labels/val")

print("üéØ –í—Å–µ –∫–ª–∞—Å—Å—ã 0 –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 1!")



import os

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
image_dir = "detection/data/train/images"
label_dir = "detection/data/train/labels"

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
image_names = {os.path.splitext(f)[0] for f in os.listdir(image_dir) if f.endswith((".jpg", ".png", ".jpeg"))}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ labels
for label_file in os.listdir(label_dir):
    label_name, ext = os.path.splitext(label_file)

    # –ï—Å–ª–∏ —Ñ–∞–π–ª .txt, –Ω–æ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º
    if ext == ".txt" and label_name not in image_names:
        os.remove(os.path.join(label_dir, label_file))
        print(f"–£–¥–∞–ª—ë–Ω: {label_file}")

print("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")